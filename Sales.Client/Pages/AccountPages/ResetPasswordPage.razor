@using Models

@page "/ResetPassword/{Token}"
@inject Repositories.IAccountRepository repo

<PageTitle>@Localizer[nameof(Strings.SiteName)] | @Localizer[nameof(Strings.ResetPassword)]</PageTitle>
<NavbarComponent />

<div class="container">
    <div class="col-lg-6 col-md-8 col-sm-12">
        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger alert-dismissible mt-4 fade show popup @(AppServices.IsArabic ? "text-right" : "text-left")"
                 @onclick="HideMessage" role="alert">
                @ErrorMessage
                <button type="button" class="btn-close"></button>
            </div>
        }

        <div class="alert alert-warning fade show popup mt-5" role="alert">
            <h6 class="mt-2">@(string.Format(Localizer[nameof(Strings.ResetExpireAt)].Value, Minutes))</h6>
        </div>

          <div class="alert alert-success fade show popup mt-2 mb-4" role="alert">
            <strong>@Localizer[nameof(Strings.ResetPassword)]</strong>
            <h6 class="mt-2">@Localizer[nameof(Strings.AccountRecoverySuccess)]</h6>
        </div>

        <EditForm Model="ResetPasswordModel" OnValidSubmit="OnValidSubmit" FormName="ResetPassword">
            <DataAnnotationsValidator />

            <!-- Verification Code input -->
            <div class="mb-3">
                <label class="form-label">
                    @Localizer[nameof(Strings.VerifyCode)]
                </label>
                <InputText class="form-control" disabled="@IsVerify" @onfocusout="OnFocusOut"
                           @bind-Value="ResetPasswordModel.VerificationCode" />
                <ValidationMessage class="lbl-error" For="()=> ResetPasswordModel.VerificationCode" />
            </div>

            <!-- Password input -->
            <div class="mb-3">
                <label class="form-label">
                    @Localizer[nameof(Strings.Password)]
                </label>
                <InputText type="password" class="form-control" disabled="@Disabled"
                           @bind-Value="ResetPasswordModel.Password" />
                <ValidationMessage class="lbl-error" For="()=> ResetPasswordModel.Password" />
            </div>

            <!-- Password Confirm input -->
            <div class="mb-3">
                <label class="form-label">
                    @Localizer[nameof(Strings.PasswordConfirm)]
                </label>
                <InputText type="password" class="form-control" disabled="@Disabled"
                           @bind-Value="ResetPasswordModel.PasswordConfirm" />
                <ValidationMessage class="lbl-error" For="()=> ResetPasswordModel.PasswordConfirm" />
            </div>

            <!-- Submit button -->
            <button type="submit" class="btn btn-primary mb-4" style="min-width:200px" disabled="@IsBusy">
                @Localizer[nameof(Strings.ResetPassword)]
            </button>
        </EditForm>
    </div>
</div>


@code {
    [Parameter] public string? Token { get; set; }
    ResetPasswordModel ResetPasswordModel = new();
    bool IsBusy = false;
    bool IsVerify = false;
    bool Disabled = true;
    string? UserId = null;
    string? ErrorMessage = null;
    int Minutes = 5;

    protected override async Task OnParametersSetAsync()
    {
        if (Token == null)
        {
            NavManager.NavigateTo("/", true);
        }
        else
        {
            var result = await repo.IsTokenExistsAsync(Token);
            if (result == false)
            {
                NavManager.NavigateTo("/", true);
            }
            else
            {
                var mainSettings = await repo.GetMainSettingAsync();
                if (mainSettings != null)
                    Minutes = mainSettings.TokenExpireMinutes;
            }
        }

        await base.OnParametersSetAsync();
    }

    async Task OnValidSubmit()
    {
        IsVerify = true;
        IsBusy = true;
        if (UserId == null) return;

        var resetPassword = new Sales.Library.Models.ResetAccount
        {
            Password = ResetPasswordModel.Password,
            UserId = UserId
        };
        var result = await repo.ResetPasswordAsync(resetPassword);
        if (result)
        {
            NavManager.NavigateTo("Login", true);
        }
        else
        {
            if (AppServices.Error != null)
                ErrorMessage = AppServices.Error;
            else
                ErrorMessage = Localizer[nameof(Strings.UnknowError)]?.Value;
        }
    }

    async Task OnFocusOut()
    {
        IsVerify = true;
        var result = await repo.VerifyCodeAsync(ResetPasswordModel.VerificationCode);
        if (result != null)
        {
            UserId = result;
            Disabled = false;
        }
        else
        {
            Disabled = true;
        }
        IsVerify = false;
    }

    void HideMessage()
    {
        ErrorMessage = null;
    }
}
