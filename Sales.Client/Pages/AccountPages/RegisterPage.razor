@using Sales.Client.Models
@using Sales.Client.Repositories
@using Sales.Library

@page "/Register"
@inject IAccountRepository repo
@inject ISiteRepository service

<div class="p-0">
    <div class="row m-0">
        <div class="col-lg-6 col-md-5 col-sm-12 p-0 container-img">
            <img class="full-img" src="images/main/register.jpg" alt="" />
        </div>
        <div class="col-lg-6 col-md-7 col-sm-12">
            <div class="col-lg-7 col-md-9 col-sm-11 mx-auto bg-white p-4 my-4 shadow">
                @if (ErrorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show popup @(AppServices.IsArabic ? "text-right" : "text-left")"
                         @onclick="HideMessage" role="alert">
                        @ErrorMessage
                        <button type="button" class="btn-close"></button>
                    </div>
                }

                <div class="text-center">
                    <img src="images/main/Register.png" class="img-fluid" style="max-width:125px" />
                    <h5 class="text-secondary">
                        @Localizer[nameof(Strings.RegisterNewAccount)]
                    </h5>
                </div>

                <EditForm Model="Register" OnValidSubmit="OnValidSubmit" FormName="RegisterForm">
                    <DataAnnotationsValidator />

                    <!-- User name -->
                    <div class="mt-4 mb-3">
                        <label class="form-label">
                            @Localizer[nameof(Strings.UserName)]
                        </label>
                        <InputText @bind-Value="Register.UserName" class="form-control" @oninput="OnUserNameChange" />
                        <ValidationMessage class="lbl-error" For="()=> Register.UserName" />
                        @if (UserNameError != null)
                        {
                            <span class="lbl-error">@UserNameError</span>
                        }
                    </div>

                    <!-- Email Address -->
                    <div class="mb-3">
                        <label class="form-label">
                            @Localizer[nameof(Strings.EmailAddress)]
                        </label>
                        <InputText type="email" @bind-Value="Register.Email" class="form-control" @oninput="OnEmailChange" />
                        <ValidationMessage class="lbl-error" For="()=> Register.Email" />
                        @if (EmailError != null)
                        {
                            <span class="lbl-error">@EmailError</span>
                        }
                    </div>

                    <!-- Password input -->
                    <div class="mb-3">
                        <label class="form-label">
                            @Localizer[nameof(Strings.Password)]
                        </label>
                        <InputText type="password" class="form-control" @bind-Value="Register.Password" />
                        <ValidationMessage class="lbl-error" For="()=> Register.Password" />
                    </div>

                    <!-- Password Confirm input -->
                    <div class="mb-3">
                        <label class="form-label">
                            @Localizer[nameof(Strings.PasswordConfirm)]
                        </label>
                        <InputText type="password" class="form-control" @bind-Value="Register.PasswordConfirm" />
                        <ValidationMessage class="lbl-error" For="()=> Register.PasswordConfirm" />
                    </div>

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary w-100 mb-4">
                        @Localizer[nameof(Strings.Register)]
                    </button>

                    <!-- Login -->
                    <div class="mb-3 text-center">
                        <span class="text-secondary">@Localizer[nameof(Strings.HaveAccount)]</span>
                        <a href="/Login" class="btn-link text-decoration-none">
                            <span>@Localizer[nameof(Strings.Login)]</span>
                        </a>
                    </div>

                </EditForm>
            </div>

        </div>
    </div>
</div>

@code {
    string? ErrorMessage = null;
    string? UserNameError = null;
    string? EmailError = null;
    RegisterModel Register = new RegisterModel();
    IEnumerable<User> Users = Enumerable.Empty<User>();

    protected override async Task OnInitializedAsync()
    {
        string? userId = await service.GetUserIdentityAsync();
        if (userId != null)
        {
            NavManager.NavigateTo("/", true);
        }

        var users = await repo.GetUsersAsync();
        if (users != null)
            Users = users;

        await base.OnInitializedAsync();
    }

    async Task OnValidSubmit()
    {
        if (Register == null || Register.UserName == null || Register.Password == null || Register.Email == null ||
            Register.PasswordConfirm == null || UserNameError != null || EmailError != null)
            return;

        bool result = await repo.RegisterAsync(Register);
        if (result)
        {
            NavManager.NavigateTo("/Login", true);
        }
        else
        {
            if (AppServices.Error != null)
            {
                ErrorMessage = AppServices.Error;
            }
            else
            {
                ErrorMessage = Localizer[nameof(Strings.UnknowError)]?.Value;
            }
        }
    }

    void HideMessage()
    {
        ErrorMessage = null;
    }

    void OnUserNameChange(ChangeEventArgs args)
    {
        UserNameError = null;
        if (args?.Value == null) return;
        var txt = args.Value as string;
        if (string.IsNullOrWhiteSpace(txt))
            return;

        if (Users.Any(x => x.UserName!.ToLower() == txt.ToLower()))
            UserNameError = Localizer[nameof(Strings.UserNameExists)]?.Value;
    }

    void OnEmailChange(ChangeEventArgs args)
    {
        EmailError = null;
        if (args?.Value == null) return;
        var txt = args.Value as string;
        if (string.IsNullOrWhiteSpace(txt))
            return;

        if (Users.Any(x => x.Email!.ToLower() == txt.ToLower()))
            EmailError = Localizer[nameof(Strings.EmailAddressExists)]?.Value;
    }
}
